5. CONCLUSIONES

Flocking es un nuevo marco para la composición de música por computadora que
aprovecha las tecnologías e ideas existentes para crear un sistema robusto,
flexible y expresivo.  Flocado combina el patrón del generador de unidades de
muchos idiomas de música de computadora con tecnologías Web Audio para permitir
a los usuarios interactuar con sitios Web existentes y potenciales tecnologías.
Los usuarios interactúan con Flocking usando un estilo declarativo de
programación.

El beneficio del enfoque de Flocking, al considerar se han demostrado varios
ejemplos de entornos de desarrollo web que utilizan tanto expresiones textuales
como visuales.  Flocking proporciona a los usuarios una forma clara y semántica
de representan los materiales de la música digital, un marco prometedor para el
crecimiento de nuevas características y herramientas, y una huella de
rendimiento ligero.
Flocking: un marco para la creación declarativa de música en la Web Colin Clark
Universidad OCAD cclark@ocadu.ca ABSTRACTO null

RESUMEN 

Flocking es un marco para la síntesis de audio y composición musical escrita
en JavaScript.  Se necesita una enfoque para resolver varios de los problemas
arquitectónicos los problemas que enfrentan los entornos de música por
ordenador, haciendo hincapié en un estilo declarativo que está estrechamente
principios de la web.

El objetivo de Flocking es permitir el crecimiento de un ecosistema de
herramientas que puedan analizar y entender fácilmente la lógica y la semántica
de los instrumentos digitales mediante la básicos de síntesis de forma
declarativa.  Esto es particularmente útil para soportar la composición
generativa (donde los programas generan nuevos instrumentos y puntajes de forma
algorítmica), herramientas gráficas (para que programadores y no programadores
colaboren), y nuevos modos de programación social que permiten a los músicos
adaptar, ampliar y volver a trabajar fácilmente los instrumentos existentes sin
tener que "Fork"su código.

Flocking proporciona una arquitectura robusta, optimizada y bien probada que
apoya explícitamente la extensibilidad y el crecimiento a largo plazo.

Flocaje se ejecuta en casi cualquier moderno Entorno de JavaScript, incluyendo
escritorio y móviles navegadores (Chrome, Firefox y Safari), así como en
dispositivos incrustados con Node.js.  

2. CÓMO FUNCIONA EL FLOCADO

2.1 El marco

El núcleo del marco Flocking consiste en varios componentes interconectados que
proporcionan el comportamiento esencial de interpretar e instanciar generadores
de unidades, producir corrientes de muestras y programar cambios.  Los
principales componentes de Flocking incluyen:

1. el intérprete Flocking, que analiza e instancia sintetizadores, generadores
de unidad y búferes

2. el medio ambiente, que representa el audio general y su configuración

3. Audio Strategies, que son salida de audio conectable (vinculados a los
backends como la API de audio web o ALSA en Node.js)

4. Generadores unitarios (ugens), que son las primitivas generadoras de
muestras utilizadas para producir sonido

5. Sintetizadores, que representan instrumentos y colecciones de la lógica de
generación de señales

6. el Programador, que gestiona el cambio basado en el tiempo eventos en un
sintetizador


2.2 Programación declarativa

Arriba, describimos Flocking como un marco declarativo.

Esta característica es esencial para comprender su diseño.

La programación declarativa se puede entender en el contexto de Flocado como
teniendo dos aspectos esenciales:

1. enfatiza una visión semántica de alto nivel de la lógica y estructura de un
programa

2. representa los programas como estructuras de datos que pueden ser entendido
por otros programas

J.W.  Lloyd describe informalmente la programación declarativa como"indicando
lo que se va a calcular, pero no necesariamente cómo se va a calcular"[7].  El
énfasis aquí es sobre los aspectos lógicos o semánticos de la computación, que
en la secuenciación de bajo nivel y el flujo de control.  Tradicional los
estilos de programación imperativos suelen una"audiencia de uno"-el compilador.
Aunque el código es a menudo compartido entre varios desarrolladores, no suele
ser comprendidos o manipulados por programas distintos de los compilador.

Por el contrario, la programación declarativa implica la capacidad de escribir
programas que están representados en un formato que pueden ser procesados
por otros programas como datos ordinarios.  los

La familia de lenguas Lisp es un ejemplo bien conocido de este enfoque.  Paul
Graham describe la naturaleza declarativa de Lisp, diciendo que "no tiene
sintaxis.  Escribes programas en los árboles de análisis... [que] son
totalmente accesibles a sus programas.  Puede escribir programas
que los manipulen...  programas que escriben programas". Aunque Flocking está
escrito en JavaScript normal, comparte con Lisp el enfoque expresar programas
dentro de estructuras de datos que estén disponible para su manipulación por
otros programas.

2.3 JSON

La clave del enfoque declarativo de Flocking es JSON, el Formato de la notación
de objetos JavaScript.  JSON es un peso ligero formato de intercambio de datos
basado en un subconjunto de JavaScript que se puede analizar y manipular en
casi cualquier lenguaje de programación.  JSON proporciona varios tipos de
datos primarios planeado para una futura versión de la especificación Web Audio
12.


6. REFERENCIAS

[1] R. B. Dannenberg,"Un lenguaje para aplicaciones de audio interactivo", en
Proceedings of the International Conferencia De La Música Del Ordenador.
Computadora Internacional Sociedad de la Música, 2002.

[2] G. Wang, P. R. Cook y col.,"Chuck: Un concurrente, lenguaje de programación
de audio en vivo", en Proceedings of the International Computer Music
Conference.  Singapur: Asociación Internacional de Música por Ordenador (ICMA),
2003, pp.  219-226.

[3] J. McCartney,"Supercollider: un nuevo lenguaje de síntesis en tiempo real",
en Proceedings of the International Computer Music Conference, 1996.

[4] Y. Orlarey, D. Fober, y S. Letz,"FAUST: un enfoque funcional eficiente a la
programación de DSP,"en Nuevos paradigmas computacionales para la música por
computadora, G. Assayag, A. Gerzso, e IRCAM, Eds.  Delatour, 2009, págs. 65-96.

[5] M. Wright,"Control de sonido abierto - un nuevo protocolo para comunicación
con los sintetizadores de sonido", en Proceedings of the 1997 International
Computer Music Conference, 1997, pp. 101-104.  [6] J. P. ffitch, V. Lazzarini,
y S. Yi,"Csound6: viejo código renovado", en LAC: Linux Audio Conference 2013:
Proceedings, I. m zmölnig y P. Plessas, Eds.  Graz, Austria: Instituto de
Música Electrónica y Acústica (IEM), Universidad de Música y Actuación Arts
Graz, mayo de 2013, pp. 69-75.  [En línea].  Disponible:
http://opus.bath.ac.uk/37389/

[7] J. W. Lloyd,"Ventajas prácticas de la programación declarativa", en la
Conferencia Conjunta sobre Programación Declarativa, GULP-PRODE, vol.  1, 1994,
pp. 18-30.  12

[8] S. Wilson, D. Cottle y N. Collins, The SuperCollider Book.  La Prensa del
MIT, 2011.

[9] J. Tenney,"Computer music experiences, 1961-1964", Se creó una nueva
ventana en la sesión existente del navegador.  Electronic Music Reports, vol.
1, pp. 23 - 60, 1969.

[10] L. Wyse y S. Subramanian,"La viabilidad de la web navegador como una
plataforma de música de computadora,"Computer Music Journal, vol.  37, no.  4,
pp. 10 - 23, 2013.

[11] C. Roberts, G. Wakefield, y M. Wright,"La web navegador como sintetizador
e interfaz", en Proceedings de Nuevas Interfaces para la Expresión Musical
(NIME), Daejeon, Seúl, 2013, págs. 313-318.

[12] N.  Yonamina, "Coffeecollider," http://mohayonao.github.io/CoffeeCollider/
(Recuperado 1 de abril de 2014).

[13] J.  Ashkenas y al., Coffeescript http://coffeescript.org/ (Consultado el 1
de abril de 2014).

[14] J. McCartney,"Repensando el lenguaje de música de computadora:
Supercollider", Computer Music Journal, vol. 26, no. 4, pp. 61–68, 2002.

[15] C. Clark, A. Basman, S. Bates y K. G. Markus,"Habilitación de la
arquitectura: Cómo la GPII apoya la inclusión desarrollo de software", en Actas
de la Conferencia Internacional sobre Interacción Hombre-Computador, 2014, en
prensa.

1. INTRODUCCIÓN

Una corriente prominente en investigación de la música del ordenador sobre el
las últimas décadas se ha centrado en la creación de lenguajes especializados
para expresar las construcciones musicales y temporales de forma programática
[1, 2, 3, 4].  Este énfasis en nuevas formas de sintaxis y de expresión de
nivel de ha producido entornos de música para ordenadores resultados útiles
para muchos casos de uso como la codificación en vivo.

No obstante, existe también un riesgo asociado con la proliferación de
lenguajes de programación música y arte: una mayor brecha entre los
codificadores creativos y los recursos disponibles para los desarrolladores de
software convencionales.  Por ejemplo, en muchas computadoras autónomas sigue
siendo difícil crear interfaces de usuario pulidas o conectarse a servicios y
fuentes de datos: tareas que se abordan rutinariamente en entornos de
programación convencionales como 1 http://flockingjs.org/



JavaScript.  Como artistas y músicos utilizan cada vez más dispositivos en red,
sensores y colaboración en su trabajo, estas limitaciones cobran un peaje
creciente en la complejidad y la escalabilidad de la codificación creativa.

Flocking es un framework JavaScript de código abierto que tiene como objetivo
abordar algunas de estas preocupaciones conectando músicos y artistas con el
modelo de distribución distribuida de la Web y con el conjunto más amplio de
bibliotecas, componentes de interfaz de usuario y tutoriales que son disponible
para la comunidad de desarrollo web.  Promover, subraya un enfoque de la
interoperabilidad en el que instrumentos declarativos y composiciones pueden
ser ampliamente compartidos, manipulados y extendidos a través de los límites
tradicionales subculturales técnicos.

1.1 Interoperabilidad en Contexto

Una preocupación principal motivadora para Flocking es que el tendencia hacia
los lenguajes de programación específicos de la música de la interoperabilidad
entre las herramientas y sistemas.  El término "interoperabilidad" se utiliza
aquí para describir un concepto específico: la capacidad de compartir una única
instancia de un artefacto de música por ordenador (es decir, un instrumento o
bidireccional entre codificadores humanos, generativo o algoritmos de
transformación, y herramientas de autoría o gráficos.  La bidireccionalidad
implica que un artefacto de software necesita preservar la semántica y los
hitos suficientes que puede ser inspeccionado, reemplazado y ampliado por
humanos y programas no sólo en el momento de la creación, sino proceso de ser
utilizado y mantenido.  Hoy en día, un posible músico elegir desde el principio
si desea o no utilizar un entorno basado en código (como SuperCollider o ChucK)
o una gráfica (Max / MSP, Pd o AudioMulch, por ejemplo).  Dado que el código de
programación imperativo no puede ser fácilmente analizado, generado y
comprendido por herramientas externas el entorno elegido, el código y los
paradigmas gráficos rara vez interoperan.  Esto agrava la dificultad de
colaborar en un proyecto musical a través de las modalidades.

La interoperabilidad entre los sistemas de música ha sido abordado de varias
maneras y en diversos grados.  Open Sound Control [5], por ejemplo, ayuda a
soportar la interoperabilidad entre sistemas y mensajes basados en el tiempo de
ejecución.  Algunos entornos gráficos como Max y Pd apoyar la incorporación
de "externalidades" programáticas dentro de un instrumento de otro modo gráfico.
FAUST ofrece generadores de código unidireccionales para una variedad de
idiomas de destino, permitiendo que los programas se escriban en el idioma
FAUST pero desplegado en otros entornos.  El formato textual simple de la
familia Music-N ha fomentado una variedad de partitura y orquesta.

Algunos entornos de música de computadora también proporcionan API para
manipular el análisis del lenguaje y los artefactos de compilación.  Una de las
nuevas características de CSound 6 incluye una API de árbol de sintaxis
abstracta, que permite a un usuario escribir C código que manipula una orquesta
antes de la compilación

[6].  La API Patcher de Max / MSP admite el programa transversal y generación
de un parche Max utilizando Java o Código JavaScript 2.  Los lenguajes basados
en Lisp tales como Extempore van más lejos hacia la interoperabilidad
potencial, proporcionando los sistemas macros que permiten para que los
algoritmos generativos más robustos sean creados dentro de las facilidades del
lenguaje sí mismo. null

En este contexto, Flocking tiene como objetivo proporcionar un marco que apoye
la interoperabilidad extendida a través de un modelo de programación
declarativa donde las intenciones de código se expresan como datos de
JavaScript Object Notation (JSON) estructuras.  JSON es un subconjunto del
lenguaje JavaScript que se utiliza ampliamente a través de la web para el
intercambio de datos 3.  El enfoque de Flocking combina la metaprogramación con
un énfasis en puntos de vista estatales y estructurales públicamente visibles
que ayuden a apoyar la alineación, extensión de artefactos musicales entre
comunidades de programadores y herramientas.

